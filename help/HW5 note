/************************************************************************************************************************/
/* packages need to be installed */
/************************************************************************************************************************/
sudo apt-get install ros-indigo-urg-node
sudo apt-get install ros-indigo-hokuyo-node
sudo apt-get install ros-indigo-hector-slam
sudo apt-get install ros-indigo-map-server
sudo apt-get install ros-indigo-amcl
sudo apt-get install python-serial

/************************************************************************************************************************/
/* Create the package */
/************************************************************************************************************************/

//If you do not have the catkin folder, go to here and follow tutorial http://sdk.rethinkrobotics.com/wiki/Workstation_Setup

cd ~/catkin_ws/src
catkin_create_pkg homework hokuyo_node urg_node hector_mapping tf hector_trajectory_server hector_geotiff map_server amcl rviz std_msgs nav_msgs rospy roscpp
cd ..
catkin_make
/* If catkin_make does not work, do $ source /opt/ros/indigo/setup.bash, then do the catkin_make again	*/
source ./devel/setup.bash

/* Copy all provided source files to the directory that we just created in /catkin_ws/src/homework/ as following	*/
homework/launch/load_map.launch
homework/src/way_point.py
homework/resources/map/hallway.yaml	// open hallway.yaml, edit the first line so that it matches with your directory
homework/resources/map/hallway.pgm

/* make .py files excutable */
cd ~/catkin_ws/src/homework/src
chmod +x *.py
cd ~/catkin_ws

/************************************************************************************************************************/
/* Excute the package with example launch file */
/************************************************************************************************************************/
/* example to load the map and display way points */

/*	 setup environment	*/
source /opt/ros/indigo/setup.bash 
source ~/catkin_ws/devel/setup.bash
/*	 run launch file 	*/
roslaunch homework load_map.launch

/*load the map of hallway outside B307. Then click on the map with "2D Nav Goal" in rviz to get way points coordinates */

/************************************************************************************************************************/
/* connect to hokuyo laser */
/************************************************************************************************************************/

Hokuyo URG-04LX-URG01:

/* give permission to read Hokuyo URG-04LX-URG01 */
sudo chmod a+rw /dev/ttyACM0

example launch file:

<launch>
	<!--	hokuyo laser driver for URG-04LX-UG01, -120 to 120 degrees, 5m range	-->
	<node pkg="hokuyo_node" type="hokuyo_node" name="run_hokuyo_04lx" >
	    <param name="min_ang" type="double" value="-2.09439510239" />
    	<param name="max_ang" type="double" value="2.09439510239" />
	</node>
</launch>


Hokuyo URG-20LX:

Add an ethernet connection: 
IP Address 192.168.0.xx (other than 192.168.0.10)
Subnet Mask 255.255.255.0
Default Gateway 192.168.0.1

example launch file:

<launch>
	<!-- hokuyo laser driver for URG-20LX, -135 to 135 degrees, 20m range -->
	<node pkg="urg_node" type="urg_node" name="run_hokuyo_20lx" >
		<param name="ip_address" value="192.168.0.10"/>
	    <param name="min_ang" type="double" value="-2.35619449019" />
    	<param name="max_ang" type="double" value="2.35619449019" />
	</node>
</launch>

/************************************************************************************************************************/
/* example of sending command to triwheel car through serial in a python script */
/************************************************************************************************************************/
#!/usr/bin/env python
import serial
import numpy as np

/* initialize serial port to communicate with triwheel car */
console_ser = serial.Serial(port = "/dev/ttyUSB0",baudrate=115200)	# the port can be changed if there are multiple usb devices
console_ser.close()
console_ser.open()

/* Akerman steering commands */
// mode of triwheel car, char
mode = 'A'	
// throttle of triwheel car, int16, two bytes signed integer ranges from -2048 to +2048, interpreted as -100% to +100% throttle
gas_pedal = 204	
// steering angle of triwheel car, int16, two bytes signed integer ranges from -2048 to +2048, interpreted as -50 degrees to +50 degrees
steering_angle = 0	

/* construct and send the serial commands to triwheel car */
console_ser.write("A+1024-0100")
/* follow this format and make sure the string of gas_pedal and steering_angle has five bytes including the sign  */

/************************************************************************************************************************/
/* rviz setup */
/************************************************************************************************************************/
Fixed frame: map
Topics need to be added and displayed: map, Marker

/* rviz will load last saved configuration by default */











